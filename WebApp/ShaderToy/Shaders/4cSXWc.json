[{"ver":"0.1","info":{"id":"4cSXWc","date":"1707217094","viewed":228,"name":"Fire atom","username":"SinGer","description":"First experiment with fbm noise.","likes":17,"published":1,"flags":0,"usePreview":0,"tags":["fbm","random","rotation"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[],"outputs":[{"id":"4dfGRr","channel":0}],"code":"mat4 RotationMatrixX(float angle){\n    return mat4(1., 0., 0., 0., \n                0., cos(angle), -sin(angle), 0., \n                0., sin(angle), cos(angle), 0.,\n                0., 0., 0., 1.);\n}\n\nmat4 RotationMatrixY(float angle){\n    return mat4(cos(angle), 0., sin(angle), 0., \n                0., 1., 0., 0., \n                -sin(angle), 0., cos(angle), 0.,\n                0., 0., 0., 1.);\n}\n\nfloat sdCircle(vec2 st, vec2 pos, float radius){\n   return length(st - pos) + radius; \n}\n\nfloat sinTheta(float theta){\n    return sin(theta * 3.14 \/ 180.0);\n}\n\nfloat cosTheta(float theta){\n    return cos(theta * 3.14 \/ 180.0);\n}\n\nvec3 getRotation(int index){\n    vec3 angle[7];\n    angle[0] = vec3( 1.0, 0.5, 0.0 );\n    angle[1] = vec3( -1.0, 0.5, 0.0 );\n    angle[2] = vec3( 0.0, 2.0, 0.0 );   \n    return angle [index];\n}\n\nfloat getNeonCircle(float circle, float radius, float brightness){\n    circle -= radius;\n    circle = abs(circle);    \n    return circle = brightness \/ circle;   \n}\n\nfloat random (vec2 st) {\n    return fract(sin(dot(st.xy,\n                         vec2(12.9898,79.321)))*\n        51758.54);\n}\n\nfloat noise (vec2 st) {\n    vec2 i = floor(st);\n    vec2 f = fract(st);\n\n    float a = random(i);\n    float b = random(i + vec2(1.0, 0.0));\n    float c = random(i + vec2(0.0, 1.0));\n    float d = random(i + vec2(1.0, 1.0));\n\n    vec2 u = f * f * (3.0 - 2.0 * f);\n\n    return mix(a, b, u.x) +\n            (c - a)* u.y * (1.0 - u.x) +\n            (d - b) * u.x * u.y;\n}\n\nfloat fbm (vec2 st) {\n    int octaves = 2;\n    float v = 0.0;\n    float a = 0.5;\n    vec2 shift = vec2(100.0);\n    mat2 rot = mat2(cos(0.5), sin(0.5),\n                    -sin(0.5), cos(0.5));\n    for (int i = 0; i < octaves; i++) {\n        v += a * noise(st);\n        st = rot * st * 2.0 + shift;\n        a *= 0.5;\n    }\n    return v;\n}\n\nvoid mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n    vec2 st = (fragCoord.xy * 2. - iResolution.xy) \/ iResolution.y; \n    vec3 finalColor = vec3(0.);    \n    \n    vec2 q = vec2(0.);\n    q.x = fbm( st + 0.00*iTime);\n    q.y = fbm( st + vec2(1.0));\n    vec2 r = vec2(0.);\n    r.x = fbm( st + 1.0*q + vec2(1.7,9.2)+ 0.15*iTime );\n    r.y = fbm( st + 1.0*q + vec2(8.3,2.8)+ 0.126*iTime);\n    float f = fbm(st+r);      \n    \n    float signed = 1.0;\n    for (float i = 0.; i < 3.; i++){\n        vec3 col = vec3(0.); \n        vec4 st0 = vec4(st, 0.0, 1.0);\n        vec3 angle = getRotation(int(i));\n        st0 *= RotationMatrixX(angle.x);\n        st0 *= RotationMatrixY(angle.y);    \n\n        float radius = 0.5;    \n        float circle = sdCircle(st0.xy, vec2(0.), radius);\n        circle = getNeonCircle(circle, 1., 0.005);\n      \n        col +=circle;  \n        float timeCoef = iTime * 2. + i - signed;\n        float theta = 90.0 * timeCoef * signed;\n        float theta2 = 90.0 * (timeCoef + 1.2) * signed;\n        float cosAngle = st0.x * cosTheta(theta);\n        float sinAngle = st0.y * sinTheta(theta);      \n\n        vec2 point = vec2(cosTheta(theta2), sinTheta(theta2));\n        float miniCircle = sdCircle(st0.xy, point * radius, radius);\n        miniCircle = getNeonCircle(miniCircle, 0.5, 0.025);       \n    \n        col *= (cosAngle + sinAngle + miniCircle);\n        finalColor = max(finalColor + col, finalColor);\n        signed *= -1.;\n    }   \n    \n    \n    float bigCircle = sdCircle(st, vec2(0.), 0.5 * f);    \n    bigCircle -= 0.2;\n    bigCircle = abs(bigCircle);\n    bigCircle = 0.05 \/ bigCircle;\n    finalColor = max(finalColor + bigCircle, finalColor);\n    finalColor *= vec3(2.0, 1.0, 0.5);    \n    \n    fragColor = vec4(finalColor,1.0);\n}","name":"Image","description":"","type":"image"}]}]