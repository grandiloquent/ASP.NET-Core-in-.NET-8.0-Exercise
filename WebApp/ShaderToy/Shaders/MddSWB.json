[{"ver":"0.1","info":{"id":"MddSWB","date":"1461400972","viewed":461,"name":"Fake 3D scene","username":"LaBodilsen","description":"Trying to fake a 3D scene, with some 2D functions.\ni know the shadow looks a bit wierd.\nat least its fast, even my atom tablet can run it at good speed.","likes":10,"published":1,"flags":0,"usePreview":0,"tags":["2d","simple","ball","bounce","mapping","floor","fake3d"],"hasliked":0,"parentid":"","parentname":""},"renderpass":[{"inputs":[{"id":"4dXGRn","filepath":"\/media\/a\/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","previewfilepath":"\/media\/ap\/10eb4fe0ac8a7dc348a2cc282ca5df1759ab8bf680117e4047728100969e7b43.jpg","type":"texture","channel":1,"sampler":{"filter":"linear","wrap":"repeat","vflip":"false","srgb":"false","internal":"byte"},"published":1},{"id":"4df3Rr","filepath":"\/media\/a\/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","previewfilepath":"\/media\/ap\/3871e838723dd6b166e490664eead8ec60aedd6b8d95bc8e2fe3f882f0fd90f0.jpg","type":"texture","channel":0,"sampler":{"filter":"mipmap","wrap":"repeat","vflip":"true","srgb":"false","internal":"byte"},"published":1}],"outputs":[{"id":"4dfGRr","channel":0}],"code":"void mainImage( out vec4 fragColor, in vec2 fragCoord )\n{\n\tvec2 uv = (2.*fragCoord.xy - iResolution.xy) \/ iResolution.y;\n\n    float r = .7;\n    vec2 ground = vec2(0.0);\n\tvec3 color = vec3(0.0);\n    fragColor = vec4(0.0);\n    \n    \/\/Floor mapper\n\tfloat a = cos(iTime*.4)*.2;\n    uv.xy *= mat2(cos(a),sin(a),-sin(a),cos(a)); \/\/tilt ground)\n\n    if (uv.y < .5){\n    \tground.x = (uv.x\/4.)\/(.5-uv.y)+sin(iTime*.4);\n    \tground.y = uv.y \/ (uv.y-.5)-iTime\/2.5;\n    \tvec3 fc = texture(iChannel1,ground).rgb;\n    \tcolor = fc*vec3(sin(.5-uv.y));\n    }    \n    \/\/move Sphere\n    float div = iResolution.x\/iResolution.y-.7;\n    vec2 move = vec2(0);\n\t\/\/ move.x = -div+(abs(mod(iTime*1.5,div*4.)-div*2.));\n\tmove.y = 0.4-abs(sin(iTime\/.4)*.9);\n\n    \/\/ Shadow\n    vec2 sphe = uv;\n    sphe.y += (uv.y+uv.x*.5)+move.y+1.6;\n    sphe.x += (-uv.x*.1+1.4)-move.y-.5;\n\tfloat radius = r+move.y\/2.-.1;\n    float shadow = step(length(sphe),radius);\n    if (shadow > radius){\n        float shadow = .7;\/\/(length(sphe+(r\/3.))*.7\/r);\n        color *= shadow;\n    }\n    \/\/Sphere mapper (derived from https:\/\/www.shadertoy.com\/view\/4d33RM)\n    float sphere = step(length(uv+move),r);\n    if (sphere > r){\n    \tvec2 map = vec2(0.0);\n        vec2 p = uv+move;\n\t\tfloat d=sqrt(dot(p,p));\n        map.x=p.x\/(r+sqrt(r-d))+1.-sin(iTime*.4);\n\t\tmap.y=p.y\/(r+sqrt(r-d))-iTime*1.2;  \n        float light = 1.-length(uv+move-(r\/3.))*.7\/r;\n        color = vec3(light,light,light)*texture(iChannel0,map).rgb*2.;\n        }\n    \n    fragColor = vec4(color,1.0);\n}","name":"Image","description":"","type":"image"}]}]